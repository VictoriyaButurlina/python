# Задача 2
# Дан список повторяющихся элементов. 
# Вернуть список с дублирующимися элементами. 
# В результирующем списке не должно быть дубликатов.

# def list_of_duplicates(_list_integer: list[int]) -> list[int]:
#     _set = set()  # Создаем пустое множество для хранения дубликатов

#     for _item in _list_integer:
#         if _list_integer.count(_item) > 1:  # Проверяем, сколько раз встречается элемент в списке
#             _set.add(_item)  # Если элемент встречается больше одного раза, добавляем его в множество

#     return list(_set)  # Преобразуем множество обратно в список и возвращаем результат

# list_integer = [1, 5,5,5,56,88,4,7,4,8,2,6,555,4,4,7,4,7,4,74,65]

# print(list_of_duplicates(list_integer))  # Список без дубликатов


# Задача 3
# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. 
# Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии или из документации к языку.
# import re

# def top_10_words(text):

  # Преобразуем текст в список слов, игнорируя знаки препинания и регистр символов.

#   words = re.split(r"\W+", text.lower())

#   # Создаем словарь, где ключом является слово, а значением - количество его вхождений.

#   word_counts = {}
#   for word in words:
#     if word in word_counts:
#       word_counts[word] += 1
#     else:
#       word_counts[word] = 1

#   # Получаем список из 10 самых частых слов, отсортированный по убыванию частоты.

#   top_10 = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:10]

#   # Возвращаем список.

#   return top_10

# text = 'Python Язык программирования Высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ. Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода пробельными отступами. Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов'


# top_10 = top_10_words(text)
# print(top_10)

# Задача 4
# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения. 
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
# Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.
def pack_backpack(_items: dict[str, int], _max_weight: int) -> list[int]:

    _possible_items = []

    for _item, _weight in _items.items():

        if _weight <= _max_weight:

            _possible_items.append(_item)
            _max_weight -= _weight

    return _possible_items


MAX_WEIGHT = 10

items = {
  "палатка": 2.0,
  "спальник": 1.5,
  "одежда": 3.0,
  "еда": 5.0,
  "котелок": 1.0,
  "фонарик": 0.5,
}
print(pack_backpack(items, MAX_WEIGHT))
